---
import type { Project } from '../data/projects';

type Item = Pick<Project, 'slug' | 'title' | 'tag' | 'cover' | 'images'>;

interface Props {
  items?: Item[] | null;
}

const { items = [] } = Astro.props as Props;

// normalize and filter out any undefined values
const safeItems: Item[] = Array.isArray(items)
  ? items.filter((i): i is Item => typeof i === 'object' && i !== null)
  : [];
---

<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
  {safeItems.map((item) => {
    const images = Array.isArray(item.images) ? item.images : [];
    const multi = images.length > 1;
    const href = `/projects/${item.slug}`;

    const card = (
      <div class="group relative rounded-xl overflow-hidden border border-white/5 bg-white/5 hover:bg-white/10 transition">
        <img
          src={item.cover}
          alt={item.title}
          class="w-full h-64 object-cover"
          data-zoom={!multi ? true : undefined}
          data-src={!multi ? (images[0] ?? item.cover) : undefined}
        />
        <div class="absolute inset-x-0 bottom-0 p-4 bg-gradient-to-t from-black/60 to-transparent">
          <div class="text-xs tracking-wider text-white/70">{item.tag}</div>
          <div class="font-semibold">{item.title}</div>
          <div class="text-white/70 text-xs mt-1">
            {multi ? `${images.length} photos` : 'Tap to zoom'}
          </div>
        </div>
      </div>
    );

    return (
      <div>
        {multi ? <a href={href} aria-label={item.title}>{card}</a> : card}
      </div>
    );
  })}
</div>
